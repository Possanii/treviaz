// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// user condominium data

model Condominium {
  id         String            @id @default(uuid())
  name       String
  slug       String            @unique
  address    Address           @relation(fields: [address_id], references: [id])
  address_id String            @unique
  photo_url  String?
  created_at DateTime          @default(now())
  updated_at DateTime          @updatedAt
  users      UserCondominium[]
  reserves   Reserve[]
  guests     Guest[]
  units      Unit[]
  invites    Invite[]

  owner         User            @relation(fields: [owner_id], references: [id])
  owner_id      String
  ForumCategory ForumCategory[]

  @@map("condominiums")
}

model Unit {
  id             String      @id @default(uuid())
  condominium_id String
  number         String
  condominium    Condominium @relation(fields: [condominium_id], references: [id])

  @@map("units")
}

model Address {
  id           String       @id @default(uuid())
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  country      String
  zip_code     String
  created_at   DateTime     @default(now())
  updated_at   DateTime     @updatedAt
  condominium  Condominium?

  @@map("addresses")
}

model User {
  id                     String            @id @unique @default(uuid())
  name                   String
  email                  String            @unique
  avatar_url             String?
  created_at             DateTime          @default(now())
  updated_at             DateTime?         @updatedAt
  forumPosts             ForumPost[]
  condominiums           UserCondominium[]
  reserves               Reserve[]
  guests                 Guest[]
  notifications          Notification[]
  owner_condominiums     Condominium[]
  invites_created        Invite[]
  forum_category_created ForumCategory[]
  forum_threads_created  ForumThread[]     @relation("created_forum_threads")
  forum_threads_approved ForumThread[]     @relation("approved_forum_threads")

  @@map("users")
}

model UserCondominium {
  id             String   @id @default(uuid())
  user_id        String
  condominium_id String
  role           Role
  joined_at      DateTime @default(now())

  user        User        @relation(fields: [user_id], references: [id])
  condominium Condominium @relation(fields: [condominium_id], references: [id])

  @@map("user_condominiums")
}

model ServiceOwner {
  id              String   @id @default(uuid())
  name            String
  document_number String
  email           String   @unique
  phone           String
  password_hashed String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  @@map("service_owners")
}

enum Role {
  RESIDENT
  ADMIN
  SYNDIC
  BILLING
  SERVICES
}

enum ReserveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum ForumStatus {
  APPROVED
  DENIED
  PENDING
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DENIED
  REVOKED
}

// Forum
model ForumCategory {
  id          String   @id @default(uuid())
  name        String
  slug        String
  description String
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  condominium    Condominium @relation(fields: [condominium_id], references: [id])
  condominium_id String

  created_by         User   @relation(fields: [created_by_user_id], references: [id])
  created_by_user_id String

  threads ForumThread[]

  @@unique([condominium_id, slug])
  @@map("forum_categories")
}

model ForumThread {
  id         String      @id @default(uuid())
  title      String
  slug       String
  status     ForumStatus @default(PENDING)
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt

  related_to_category    ForumCategory @relation(fields: [related_to_category_id], references: [id])
  related_to_category_id String

  created_by         User   @relation(fields: [created_by_user_id], references: [id], name: "created_forum_threads")
  created_by_user_id String

  approved_by         User?   @relation(fields: [approved_by_user_id], references: [id], name: "approved_forum_threads")
  approved_by_user_id String?

  posts ForumPost[]

  @@unique([related_to_category_id, slug])
  @@map("forum_threads")
}

model ForumPost {
  id         String   @id @default(uuid())
  content    String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  thread    ForumThread @relation(fields: [thread_id], references: [id])
  thread_id String

  @@map("forum_posts")
}

//services

model Reserve {
  id             String        @id @default(uuid())
  user_id        String
  condominium_id String
  space_name     String
  reserve_date   DateTime
  start_time     DateTime
  end_time       DateTime
  status         ReserveStatus
  created_at     DateTime      @default(now())

  user        User        @relation(fields: [user_id], references: [id])
  condominium Condominium @relation(fields: [condominium_id], references: [id])

  @@map("reserves")
}

model Guest {
  id             String   @id @default(uuid())
  user_id        String
  condominium_id String
  qr_code        String
  valid_from     DateTime
  valid_until    DateTime
  created_at     DateTime @default(now())

  user        User        @relation(fields: [user_id], references: [id])
  condominium Condominium @relation(fields: [condominium_id], references: [id])

  @@map("guests")
}

model Invite {
  id         String       @id @default(uuid())
  email      String
  role       Role
  token      String       @unique
  status     InviteStatus @default(PENDING)
  sent_at    DateTime     @default(now())
  expires_at DateTime

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  condominium    Condominium @relation(fields: [condominium_id], references: [id])
  condominium_id String

  @@unique([email, condominium_id])
  @@map("invites")
}

model Notification {
  id         String   @id @default(uuid())
  user_id    String
  title      String
  message    String
  created_at DateTime @default(now())
  viewed     Boolean  @default(false)
  type       String
  data       Json

  user User @relation(fields: [user_id], references: [id])

  @@map("notifications")
}
